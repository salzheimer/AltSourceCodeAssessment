//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ledger.UI.Web.LedgerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/Ledger.Core")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ledger.UI.Web.LedgerService.Category))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ledger.UI.Web.LedgerService.PaymentType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ledger.UI.Web.LedgerService.Transaction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ledger.UI.Web.LedgerService.TransactionModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ledger.UI.Web.LedgerService.Account))]
    public partial class BaseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateUpdatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UpdatedByField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateUpdated {
            get {
                return this.DateUpdatedField;
            }
            set {
                if ((this.DateUpdatedField.Equals(value) != true)) {
                    this.DateUpdatedField = value;
                    this.RaisePropertyChanged("DateUpdated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UpdatedBy {
            get {
                return this.UpdatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdatedByField, value) != true)) {
                    this.UpdatedByField = value;
                    this.RaisePropertyChanged("UpdatedBy");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/Ledger.Core")]
    [System.SerializableAttribute()]
    public partial class Category : Ledger.UI.Web.LedgerService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaymentType", Namespace="http://schemas.datacontract.org/2004/07/Ledger.Core")]
    [System.SerializableAttribute()]
    public partial class PaymentType : Ledger.UI.Web.LedgerService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Transaction", Namespace="http://schemas.datacontract.org/2004/07/Ledger.Core")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Ledger.UI.Web.LedgerService.TransactionModel))]
    public partial class Transaction : Ledger.UI.Web.LedgerService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid AccountIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDepositField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PaymentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TransactionDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid AccountId {
            get {
                return this.AccountIdField;
            }
            set {
                if ((this.AccountIdField.Equals(value) != true)) {
                    this.AccountIdField = value;
                    this.RaisePropertyChanged("AccountId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeposit {
            get {
                return this.IsDepositField;
            }
            set {
                if ((this.IsDepositField.Equals(value) != true)) {
                    this.IsDepositField = value;
                    this.RaisePropertyChanged("IsDeposit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PaymentTypeId {
            get {
                return this.PaymentTypeIdField;
            }
            set {
                if ((this.PaymentTypeIdField.Equals(value) != true)) {
                    this.PaymentTypeIdField = value;
                    this.RaisePropertyChanged("PaymentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TransactionDate {
            get {
                return this.TransactionDateField;
            }
            set {
                if ((this.TransactionDateField.Equals(value) != true)) {
                    this.TransactionDateField = value;
                    this.RaisePropertyChanged("TransactionDate");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionModel", Namespace="http://schemas.datacontract.org/2004/07/Ledger.Services.Api.Models")]
    [System.SerializableAttribute()]
    public partial class TransactionModel : Ledger.UI.Web.LedgerService.Transaction {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaymentTypeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaymentTypeName {
            get {
                return this.PaymentTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PaymentTypeNameField, value) != true)) {
                    this.PaymentTypeNameField = value;
                    this.RaisePropertyChanged("PaymentTypeName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/Ledger.Core")]
    [System.SerializableAttribute()]
    public partial class Account : Ledger.UI.Web.LedgerService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LedgerService.IAccountService")]
    public interface IAccountService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/CreateAccount", ReplyAction="http://tempuri.org/IAccountService/CreateAccountResponse")]
        string CreateAccount(Ledger.UI.Web.LedgerService.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/CreateAccount", ReplyAction="http://tempuri.org/IAccountService/CreateAccountResponse")]
        System.Threading.Tasks.Task<string> CreateAccountAsync(Ledger.UI.Web.LedgerService.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/LogIn", ReplyAction="http://tempuri.org/IAccountService/LogInResponse")]
        string LogIn(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/LogIn", ReplyAction="http://tempuri.org/IAccountService/LogInResponse")]
        System.Threading.Tasks.Task<string> LogInAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/LogOut", ReplyAction="http://tempuri.org/IAccountService/LogOutResponse")]
        void LogOut();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/LogOut", ReplyAction="http://tempuri.org/IAccountService/LogOutResponse")]
        System.Threading.Tasks.Task LogOutAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountServiceChannel : Ledger.UI.Web.LedgerService.IAccountService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountServiceClient : System.ServiceModel.ClientBase<Ledger.UI.Web.LedgerService.IAccountService>, Ledger.UI.Web.LedgerService.IAccountService {
        
        public AccountServiceClient() {
        }
        
        public AccountServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CreateAccount(Ledger.UI.Web.LedgerService.Account account) {
            return base.Channel.CreateAccount(account);
        }
        
        public System.Threading.Tasks.Task<string> CreateAccountAsync(Ledger.UI.Web.LedgerService.Account account) {
            return base.Channel.CreateAccountAsync(account);
        }
        
        public string LogIn(string userName, string password) {
            return base.Channel.LogIn(userName, password);
        }
        
        public System.Threading.Tasks.Task<string> LogInAsync(string userName, string password) {
            return base.Channel.LogInAsync(userName, password);
        }
        
        public void LogOut() {
            base.Channel.LogOut();
        }
        
        public System.Threading.Tasks.Task LogOutAsync() {
            return base.Channel.LogOutAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LedgerService.ICategoryService")]
    public interface ICategoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetCategories", ReplyAction="http://tempuri.org/ICategoryService/GetCategoriesResponse")]
        Ledger.UI.Web.LedgerService.Category[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetCategories", ReplyAction="http://tempuri.org/ICategoryService/GetCategoriesResponse")]
        System.Threading.Tasks.Task<Ledger.UI.Web.LedgerService.Category[]> GetCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetCategory", ReplyAction="http://tempuri.org/ICategoryService/GetCategoryResponse")]
        Ledger.UI.Web.LedgerService.Category GetCategory(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetCategory", ReplyAction="http://tempuri.org/ICategoryService/GetCategoryResponse")]
        System.Threading.Tasks.Task<Ledger.UI.Web.LedgerService.Category> GetCategoryAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/CreateCategory", ReplyAction="http://tempuri.org/ICategoryService/CreateCategoryResponse")]
        string CreateCategory(Ledger.UI.Web.LedgerService.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/CreateCategory", ReplyAction="http://tempuri.org/ICategoryService/CreateCategoryResponse")]
        System.Threading.Tasks.Task<string> CreateCategoryAsync(Ledger.UI.Web.LedgerService.Category category);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICategoryServiceChannel : Ledger.UI.Web.LedgerService.ICategoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CategoryServiceClient : System.ServiceModel.ClientBase<Ledger.UI.Web.LedgerService.ICategoryService>, Ledger.UI.Web.LedgerService.ICategoryService {
        
        public CategoryServiceClient() {
        }
        
        public CategoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CategoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Ledger.UI.Web.LedgerService.Category[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<Ledger.UI.Web.LedgerService.Category[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
        
        public Ledger.UI.Web.LedgerService.Category GetCategory(int id) {
            return base.Channel.GetCategory(id);
        }
        
        public System.Threading.Tasks.Task<Ledger.UI.Web.LedgerService.Category> GetCategoryAsync(int id) {
            return base.Channel.GetCategoryAsync(id);
        }
        
        public string CreateCategory(Ledger.UI.Web.LedgerService.Category category) {
            return base.Channel.CreateCategory(category);
        }
        
        public System.Threading.Tasks.Task<string> CreateCategoryAsync(Ledger.UI.Web.LedgerService.Category category) {
            return base.Channel.CreateCategoryAsync(category);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LedgerService.IPaymentTypeService")]
    public interface IPaymentTypeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentTypeService/CreatePaymentType", ReplyAction="http://tempuri.org/IPaymentTypeService/CreatePaymentTypeResponse")]
        string CreatePaymentType(Ledger.UI.Web.LedgerService.PaymentType pType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentTypeService/CreatePaymentType", ReplyAction="http://tempuri.org/IPaymentTypeService/CreatePaymentTypeResponse")]
        System.Threading.Tasks.Task<string> CreatePaymentTypeAsync(Ledger.UI.Web.LedgerService.PaymentType pType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentTypeService/GetPaymentTypes", ReplyAction="http://tempuri.org/IPaymentTypeService/GetPaymentTypesResponse")]
        Ledger.UI.Web.LedgerService.PaymentType[] GetPaymentTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentTypeService/GetPaymentTypes", ReplyAction="http://tempuri.org/IPaymentTypeService/GetPaymentTypesResponse")]
        System.Threading.Tasks.Task<Ledger.UI.Web.LedgerService.PaymentType[]> GetPaymentTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentTypeService/GetPaymentType", ReplyAction="http://tempuri.org/IPaymentTypeService/GetPaymentTypeResponse")]
        Ledger.UI.Web.LedgerService.PaymentType GetPaymentType(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPaymentTypeService/GetPaymentType", ReplyAction="http://tempuri.org/IPaymentTypeService/GetPaymentTypeResponse")]
        System.Threading.Tasks.Task<Ledger.UI.Web.LedgerService.PaymentType> GetPaymentTypeAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPaymentTypeServiceChannel : Ledger.UI.Web.LedgerService.IPaymentTypeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PaymentTypeServiceClient : System.ServiceModel.ClientBase<Ledger.UI.Web.LedgerService.IPaymentTypeService>, Ledger.UI.Web.LedgerService.IPaymentTypeService {
        
        public PaymentTypeServiceClient() {
        }
        
        public PaymentTypeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PaymentTypeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaymentTypeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PaymentTypeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CreatePaymentType(Ledger.UI.Web.LedgerService.PaymentType pType) {
            return base.Channel.CreatePaymentType(pType);
        }
        
        public System.Threading.Tasks.Task<string> CreatePaymentTypeAsync(Ledger.UI.Web.LedgerService.PaymentType pType) {
            return base.Channel.CreatePaymentTypeAsync(pType);
        }
        
        public Ledger.UI.Web.LedgerService.PaymentType[] GetPaymentTypes() {
            return base.Channel.GetPaymentTypes();
        }
        
        public System.Threading.Tasks.Task<Ledger.UI.Web.LedgerService.PaymentType[]> GetPaymentTypesAsync() {
            return base.Channel.GetPaymentTypesAsync();
        }
        
        public Ledger.UI.Web.LedgerService.PaymentType GetPaymentType(int id) {
            return base.Channel.GetPaymentType(id);
        }
        
        public System.Threading.Tasks.Task<Ledger.UI.Web.LedgerService.PaymentType> GetPaymentTypeAsync(int id) {
            return base.Channel.GetPaymentTypeAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LedgerService.ITransactionService")]
    public interface ITransactionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/MakeDeposit", ReplyAction="http://tempuri.org/ITransactionService/MakeDepositResponse")]
        string MakeDeposit(Ledger.UI.Web.LedgerService.TransactionModel deposit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/MakeDeposit", ReplyAction="http://tempuri.org/ITransactionService/MakeDepositResponse")]
        System.Threading.Tasks.Task<string> MakeDepositAsync(Ledger.UI.Web.LedgerService.TransactionModel deposit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/MakeWithdrawal", ReplyAction="http://tempuri.org/ITransactionService/MakeWithdrawalResponse")]
        string MakeWithdrawal(Ledger.UI.Web.LedgerService.TransactionModel withdrawal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/MakeWithdrawal", ReplyAction="http://tempuri.org/ITransactionService/MakeWithdrawalResponse")]
        System.Threading.Tasks.Task<string> MakeWithdrawalAsync(Ledger.UI.Web.LedgerService.TransactionModel withdrawal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/GetTransactions", ReplyAction="http://tempuri.org/ITransactionService/GetTransactionsResponse")]
        Ledger.UI.Web.LedgerService.TransactionModel[] GetTransactions(System.Guid accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/GetTransactions", ReplyAction="http://tempuri.org/ITransactionService/GetTransactionsResponse")]
        System.Threading.Tasks.Task<Ledger.UI.Web.LedgerService.TransactionModel[]> GetTransactionsAsync(System.Guid accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/GetTransaction", ReplyAction="http://tempuri.org/ITransactionService/GetTransactionResponse")]
        Ledger.UI.Web.LedgerService.TransactionModel GetTransaction(System.Guid transactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/GetTransaction", ReplyAction="http://tempuri.org/ITransactionService/GetTransactionResponse")]
        System.Threading.Tasks.Task<Ledger.UI.Web.LedgerService.TransactionModel> GetTransactionAsync(System.Guid transactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/DeleteTransaction", ReplyAction="http://tempuri.org/ITransactionService/DeleteTransactionResponse")]
        string DeleteTransaction(System.Guid transactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/DeleteTransaction", ReplyAction="http://tempuri.org/ITransactionService/DeleteTransactionResponse")]
        System.Threading.Tasks.Task<string> DeleteTransactionAsync(System.Guid transactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/UpdateTransaction", ReplyAction="http://tempuri.org/ITransactionService/UpdateTransactionResponse")]
        string UpdateTransaction(Ledger.UI.Web.LedgerService.TransactionModel transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransactionService/UpdateTransaction", ReplyAction="http://tempuri.org/ITransactionService/UpdateTransactionResponse")]
        System.Threading.Tasks.Task<string> UpdateTransactionAsync(Ledger.UI.Web.LedgerService.TransactionModel transaction);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransactionServiceChannel : Ledger.UI.Web.LedgerService.ITransactionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransactionServiceClient : System.ServiceModel.ClientBase<Ledger.UI.Web.LedgerService.ITransactionService>, Ledger.UI.Web.LedgerService.ITransactionService {
        
        public TransactionServiceClient() {
        }
        
        public TransactionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransactionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransactionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string MakeDeposit(Ledger.UI.Web.LedgerService.TransactionModel deposit) {
            return base.Channel.MakeDeposit(deposit);
        }
        
        public System.Threading.Tasks.Task<string> MakeDepositAsync(Ledger.UI.Web.LedgerService.TransactionModel deposit) {
            return base.Channel.MakeDepositAsync(deposit);
        }
        
        public string MakeWithdrawal(Ledger.UI.Web.LedgerService.TransactionModel withdrawal) {
            return base.Channel.MakeWithdrawal(withdrawal);
        }
        
        public System.Threading.Tasks.Task<string> MakeWithdrawalAsync(Ledger.UI.Web.LedgerService.TransactionModel withdrawal) {
            return base.Channel.MakeWithdrawalAsync(withdrawal);
        }
        
        public Ledger.UI.Web.LedgerService.TransactionModel[] GetTransactions(System.Guid accountId) {
            return base.Channel.GetTransactions(accountId);
        }
        
        public System.Threading.Tasks.Task<Ledger.UI.Web.LedgerService.TransactionModel[]> GetTransactionsAsync(System.Guid accountId) {
            return base.Channel.GetTransactionsAsync(accountId);
        }
        
        public Ledger.UI.Web.LedgerService.TransactionModel GetTransaction(System.Guid transactionId) {
            return base.Channel.GetTransaction(transactionId);
        }
        
        public System.Threading.Tasks.Task<Ledger.UI.Web.LedgerService.TransactionModel> GetTransactionAsync(System.Guid transactionId) {
            return base.Channel.GetTransactionAsync(transactionId);
        }
        
        public string DeleteTransaction(System.Guid transactionId) {
            return base.Channel.DeleteTransaction(transactionId);
        }
        
        public System.Threading.Tasks.Task<string> DeleteTransactionAsync(System.Guid transactionId) {
            return base.Channel.DeleteTransactionAsync(transactionId);
        }
        
        public string UpdateTransaction(Ledger.UI.Web.LedgerService.TransactionModel transaction) {
            return base.Channel.UpdateTransaction(transaction);
        }
        
        public System.Threading.Tasks.Task<string> UpdateTransactionAsync(Ledger.UI.Web.LedgerService.TransactionModel transaction) {
            return base.Channel.UpdateTransactionAsync(transaction);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LedgerService.ILedgerService")]
    public interface ILedgerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILedgerService/UseTestDatabase", ReplyAction="http://tempuri.org/ILedgerService/UseTestDatabaseResponse")]
        void UseTestDatabase(bool isInMemoryDb);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILedgerService/UseTestDatabase", ReplyAction="http://tempuri.org/ILedgerService/UseTestDatabaseResponse")]
        System.Threading.Tasks.Task UseTestDatabaseAsync(bool isInMemoryDb);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILedgerServiceChannel : Ledger.UI.Web.LedgerService.ILedgerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LedgerServiceClient : System.ServiceModel.ClientBase<Ledger.UI.Web.LedgerService.ILedgerService>, Ledger.UI.Web.LedgerService.ILedgerService {
        
        public LedgerServiceClient() {
        }
        
        public LedgerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LedgerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LedgerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LedgerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UseTestDatabase(bool isInMemoryDb) {
            base.Channel.UseTestDatabase(isInMemoryDb);
        }
        
        public System.Threading.Tasks.Task UseTestDatabaseAsync(bool isInMemoryDb) {
            return base.Channel.UseTestDatabaseAsync(isInMemoryDb);
        }
    }
}
